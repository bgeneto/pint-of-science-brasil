#!/usr/bin/env python3
"""
Script para regenerar todos os hashes de valida√ß√£o de certificados.

Use este script quando:
- A CERTIFICATE_SECRET_KEY foi alterada
- Houve mudan√ßa na l√≥gica de gera√ß√£o de hash
- Deseja recalcular todos os hashes existentes

ATEN√á√ÉO: Isso invalidar√° todos os certificados PDF j√° emitidos!
"""

import sys
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.db import db_manager
from app.models import Participante
from app.services import servico_criptografia


def regenerar_todos_hashes(confirmar: bool = False):
    """
    Regenera os hashes de valida√ß√£o para todos os participantes.

    Args:
        confirmar: Se True, executa a regenera√ß√£o. Se False, apenas simula.
    """

    print("üîÑ Script de Regenera√ß√£o de Hashes de Valida√ß√£o")
    print("=" * 60)

    if not confirmar:
        print("‚ö†Ô∏è  MODO SIMULA√á√ÉO - Nenhuma altera√ß√£o ser√° feita no banco")
        print()

    try:
        with db_manager.get_db_session() as session:
            # Buscar todos os participantes
            participantes = session.query(Participante).all()

            print(f"üìä Total de participantes encontrados: {len(participantes)}")
            print()

            if not participantes:
                print("‚ÑπÔ∏è  Nenhum participante encontrado no banco de dados.")
                return

            # Contar quantos j√° t√™m hash
            com_hash = sum(1 for p in participantes if p.hash_validacao)
            sem_hash = len(participantes) - com_hash

            print(f"‚úÖ Participantes com hash: {com_hash}")
            print(f"‚ùå Participantes sem hash: {sem_hash}")
            print()

            if not confirmar:
                print("Para executar a regenera√ß√£o, execute:")
                print(f"  python {sys.argv[0]} --confirm")
                print()
                print(
                    "‚ö†Ô∏è  ATEN√á√ÉO: Isso invalidar√° todos os certificados PDF j√° emitidos!"
                )
                return

            # Confirmar com o usu√°rio
            print("‚ö†Ô∏è  ATEN√á√ÉO!")
            print("Esta a√ß√£o ir√°:")
            print("  1. Regenerar todos os hashes de valida√ß√£o")
            print("  2. INVALIDAR todos os certificados PDF j√° emitidos")
            print("  3. Requerer nova gera√ß√£o de certificados para todos")
            print()

            resposta = input(
                "Tem certeza que deseja continuar? Digite 'SIM' para confirmar: "
            )

            if resposta.strip().upper() != "SIM":
                print()
                print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
                return

            print()
            print("üîÑ Iniciando regenera√ß√£o de hashes...")
            print()

            sucesso = 0
            erros = 0

            for i, participante in enumerate(participantes, 1):
                try:
                    # Descriptografar dados
                    nome = servico_criptografia.descriptografar(
                        participante.nome_completo_encrypted
                    )
                    email = servico_criptografia.descriptografar(
                        participante.email_encrypted
                    )

                    # Gerar novo hash
                    novo_hash = servico_criptografia.gerar_hash_validacao_certificado(
                        participante.id, participante.evento_id, email, nome
                    )

                    # Verificar se mudou
                    hash_anterior = participante.hash_validacao
                    mudou = hash_anterior != novo_hash

                    # Atualizar no banco
                    participante.hash_validacao = novo_hash

                    status = "üîÑ ATUALIZADO" if mudou else "‚úì Mantido"
                    print(
                        f"[{i:3d}/{len(participantes)}] {status} - ID {participante.id}: {nome[:40]}"
                    )

                    sucesso += 1

                except Exception as e:
                    print(
                        f"[{i:3d}/{len(participantes)}] ‚ùå ERRO - ID {participante.id}: {str(e)}"
                    )
                    erros += 1

            # Commit √© feito automaticamente pelo context manager

            print()
            print("=" * 60)
            print("üìä Resultado da Regenera√ß√£o:")
            print(f"  ‚úÖ Sucesso: {sucesso}")
            print(f"  ‚ùå Erros: {erros}")
            print(f"  üìÅ Total processado: {len(participantes)}")
            print()

            if erros == 0:
                print("üéâ Todos os hashes foram regenerados com sucesso!")
            else:
                print(f"‚ö†Ô∏è  {erros} erro(s) encontrado(s). Verifique os logs acima.")

    except Exception as e:
        print(f"‚ùå Erro fatal durante a regenera√ß√£o: {str(e)}")
        import traceback

        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="Regenera hashes de valida√ß√£o de certificados"
    )
    parser.add_argument(
        "--confirm",
        action="store_true",
        help="Confirma a execu√ß√£o (sem esta flag, apenas simula)",
    )

    args = parser.parse_args()

    regenerar_todos_hashes(confirmar=args.confirm)
