"""
M√≥dulo de Servi√ßos de Neg√≥cio

Este m√≥dulo cont√©m a l√≥gica de neg√≥cio central do sistema, incluindo:
- Criptografia de dados sens√≠veis
- C√°lculo de carga hor√°ria
- Gera√ß√£o de certificados PDF
- Envio de e-mails
- Valida√ß√£o de regras de neg√≥cio
"""

import logging
import re
import uuid
from datetime import datetime, timedelta
from io import BytesIO
from pathlib import Path
from typing import List, Optional, Dict, Any, Tuple
from cryptography.fernet import Fernet

import streamlit as st
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors

import requests
import json
from typing import Dict, Any

# Check if requests is available
try:
    import requests

    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False
    print(
        "‚ö†Ô∏è AVISO: Biblioteca requests n√£o dispon√≠vel. Funcionalidades de e-mail estar√£o desabilitadas."
    )

from .core import settings
from .models import (
    Evento,
    Cidade,
    Funcao,
    Participante,
    Coordenador,
    ParticipanteCreate,
    ParticipanteRead,
)
from .db import (
    db_manager,
    get_evento_repository,
    get_cidade_repository,
    get_funcao_repository,
    get_participante_repository,
    get_auditoria_repository,
)
from .auth import get_current_user_info

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ServicoCriptografia:
    """Servi√ßo para criptografia de dados sens√≠veis."""

    def __init__(self):
        if not settings.encryption_key:
            raise ValueError("Chave de criptografia n√£o configurada")

        try:
            self._fernet = Fernet(settings.encryption_key.encode())
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Fernet: {e}")
            raise ValueError("Chave de criptografia inv√°lida")

    def criptografar(self, dados: str) -> bytes:
        """Criptografa dados sens√≠veis."""
        try:
            return self._fernet.encrypt(dados.encode("utf-8"))
        except Exception as e:
            logger.error(f"‚ùå Erro ao criptografar dados: {e}")
            raise ValueError("Erro ao criptografar dados")

    def descriptografar(self, dados_criptografados: bytes) -> str:
        """Descriptografa dados sens√≠veis."""
        try:
            return self._fernet.decrypt(dados_criptografados).decode("utf-8")
        except Exception as e:
            logger.error(f"‚ùå Erro ao descriptografar dados: {e}")
            raise ValueError("Erro ao descriptografar dados")

    def criptografar_email(self, email: str) -> bytes:
        """Criptografa um endere√ßo de email."""
        return self.criptografar(email.lower().strip())

    def criptografar_nome(self, nome: str) -> bytes:
        """Criptografa um nome completo."""
        return self.criptografar(nome.strip())


class ServicoCalculoCargaHoraria:
    """Servi√ßo para c√°lculo de carga hor√°ria de participa√ß√£o."""

    def __init__(self):
        self._duracao_padrao_evento = 4  # 4 horas por dia de evento

    def calcular_carga_horaria(
        self, datas_participacao: str, evento_datas
    ) -> Tuple[int, str]:
        """
        Calcula a carga hor√°ria com base nas datas de participa√ß√£o.

        Args:
            datas_participacao: String com datas ISO separadas por v√≠rgula
            evento_datas: Lista de strings ISO ou string (formato antigo)

        Returns:
            Tupla com (carga_horaria_total, detalhes_calculo)
        """
        try:
            # Extrair dias do evento
            if isinstance(evento_datas, list):
                # Lista de strings ISO
                dias_evento = evento_datas
            else:
                # Formato antigo: string (n√£o deveria acontecer)
                dias_evento = [evento_datas]

            # Datas de participa√ß√£o v√™m como string separada por v√≠rgulas em formato ISO
            dias_participacao = [
                d.strip() for d in datas_participacao.split(",") if d.strip()
            ]

            # Calcular dias √∫nicos de participa√ß√£o
            dias_unicos = set()
            for data in dias_participacao:
                if data in dias_evento:
                    dias_unicos.add(data)

            # Calcular carga hor√°ria
            carga_horaria = len(dias_unicos) * self._duracao_padrao_evento

            detalhes = (
                f"Dias de participa√ß√£o: {len(dias_unicos)} ({', '.join(sorted(dias_unicos))})\n"
                f"Carga hor√°ria por dia: {self._duracao_padrao_evento}h\n"
                f"Total: {carga_horaria}h"
            )

            logger.info(
                f"üìä Carga hor√°ria calculada: {carga_horaria}h para {len(dias_unicos)} dias"
            )
            return carga_horaria, detalhes

        except Exception as e:
            logger.error(f"‚ùå Erro ao calcular carga hor√°ria: {e}")
            return 0, "Erro no c√°lculo"

    def validar_datas_participacao(self, datas_participacao: str, evento_datas) -> bool:
        """Valida se as datas de participa√ß√£o s√£o v√°lidas para o evento."""
        try:
            # Extrair dias do evento
            if isinstance(evento_datas, list):
                # Lista de strings ISO
                dias_evento = evento_datas
            else:
                # Formato antigo: string (n√£o deveria acontecer)
                dias_evento = [evento_datas]

            # Datas de participa√ß√£o v√™m como string separada por v√≠rgulas em formato ISO
            dias_participacao = [
                d.strip() for d in datas_participacao.split(",") if d.strip()
            ]

            if not dias_evento:
                return False

            # Verificar se pelo menos um dia de participa√ß√£o est√° no evento
            valid = any(data in dias_evento for data in dias_participacao)
            return valid

        except Exception as e:
            return False

    def _extrair_datas_texto(self, texto: str) -> List[str]:
        """Extrai datas de uma string de texto."""
        datas = []

        # Padr√µes comuns de data
        padroes = [
            r"\b\d{1,2}/\d{1,2}/\d{4}\b",  # DD/MM/YYYY
            r"\b\d{1,2}\s+de\s+[a-zA-Z√ß√á√£√µ√É√ï√°√©√≠√≥√∫√Å√â√ç√ì√ö√™√ä√¥√î√¢√Ç√†√Ä]+",  # DD de M√™s
            r"\b\d{1,2}\b",  # Apenas n√∫meros (dias)
        ]

        for padrao in padroes:
            matches = re.findall(padrao, texto, re.IGNORECASE)
            datas.extend(matches)

        # Remover duplicatas e normalizar
        return list(set([d.strip() for d in datas if d.strip()]))

    def validar_datas_participacao_old(
        self, datas_participacao: str, evento_datas: str
    ) -> bool:
        """Valida se as datas de participa√ß√£o s√£o v√°lidas para o evento."""
        try:
            dias_evento = self._extrair_datas_texto(evento_datas)
            dias_participacao = self._extrair_datas_texto(datas_participacao)

            if not dias_evento:
                return False

            # Verificar se pelo menos um dia de participa√ß√£o est√° no evento
            return any(data in dias_evento for data in dias_participacao)

        except Exception:
            return False


class ServicoEmail:
    """Servi√ßo para envio de e-mails usando Brevo API com requests."""

    def __init__(self):
        self._configured = REQUESTS_AVAILABLE and settings.is_email_configured

        if not self._configured:
            logger.warning("‚ö†Ô∏è Servi√ßo de e-mail n√£o configurado")
            return

        try:
            self.api_url = "https://api.brevo.com/v3/smtp/email"
            self.api_key = settings.brevo_api_key
            self.sender_email = settings.brevo_sender_email
            self.sender_name = settings.brevo_sender_name
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar API Brevo: {e}")
            self._configured = False

    def is_configured(self) -> bool:
        """Verifica se o servi√ßo est√° configurado."""
        return self._configured

    def enviar_email_confirmacao_inscricao(
        self, nome: str, email: str, dados_inscricao: Dict[str, Any]
    ) -> bool:
        """Envia e-mail de confirma√ß√£o de inscri√ß√£o."""
        if not self._configured:
            logger.warning("‚ö†Ô∏è E-mail n√£o enviado: servi√ßo n√£o configurado")
            return False

        try:
            assunto = "Confirma√ß√£o de Inscri√ß√£o - Pint of Science Brasil"

            html_content = f"""
            <html>
            <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
                <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                    <h2 style="color: #e74c3c; text-align: center;">
                        üç∫ Pint of Science Brasil
                    </h2>

                    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <h3>Ol√°, {nome}!</h3>
                        <p>Recebemos sua inscri√ß√£o para o Pint of Science Brasil com sucesso!</p>

                        <h4>Detalhes da sua inscri√ß√£o:</h4>
                        <ul>
                            <li><strong>Evento:</strong> {dados_inscricao.get('evento_ano', 'N/A')}</li>
                            <li><strong>Cidade:</strong> {dados_inscricao.get('cidade_nome', 'N/A')}</li>
                            <li><strong>Fun√ß√£o:</strong> {dados_inscricao.get('funcao_nome', 'N/A')}</li>
                            <li><strong>Datas de participa√ß√£o:</strong> {dados_inscricao.get('datas_participacao', 'N/A')}</li>
                            <li><strong>Carga hor√°ria:</strong> {dados_inscricao.get('carga_horaria', 0)} horas</li>
                        </ul>

                        <p><strong>Pr√≥ximos passos:</strong></p>
                        <ol>
                            <li>Aguarde a valida√ß√£o da sua participa√ß√£o pelos organizadores</li>
                            <li>Ap√≥s sua apresenta√ß√£o, voc√™ receber√° um e-mail com instru√ß√µes para download de seu certificado</li>
                            <li>Qualquer d√∫vida, entre em contato com os organizadores da sua cidade</li>
                        </ol>
                    </div>

                    <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #e8f4f8; border-radius: 8px;">
                        <p style="margin: 0;">
                            <em>"Levando a ci√™ncia para o bar"</em>
                        </p>
                        <p style="margin: 5px 0 0 0; font-size: 0.9em; color: #666;">
                            Pint of Science Brasil
                        </p>
                    </div>
                </div>
            </body>
            </html>
            """

            return self._enviar_email(email, assunto, html_content)

        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar e-mail de confirma√ß√£o: {e}")
            return False

    def enviar_email_certificado_liberado(
        self, nome: str, email: str, link_download: str
    ) -> bool:
        """Envia e-mail informando que o certificado est√° liberado."""
        if not self._configured:
            logger.warning("‚ö†Ô∏è E-mail n√£o enviado: servi√ßo n√£o configurado")
            return False

        try:
            assunto = "Seu Certificado Pint of Science Brasil Est√° Dispon√≠vel! üéâ"

            html_content = f"""
            <html>
            <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
                <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                    <h2 style="color: #27ae60; text-align: center;">
                        üéâ Certificado Dispon√≠vel!
                    </h2>

                    <div style="background-color: #f8fff8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #27ae60;">
                        <h3>Parab√©ns, {nome}!</h3>
                        <p>Sua participa√ß√£o no Pint of Science Brasil foi validada e seu certificado j√° est√° dispon√≠vel para download!</p>

                        <div style="text-align: center; margin: 30px 0;">
                            <a href="{link_download}" style="
                                background-color: #e74c3c;
                                color: white;
                                padding: 12px 24px;
                                text-decoration: none;
                                border-radius: 6px;
                                font-weight: bold;
                                display: inline-block;
                            ">
                                BAIXAR CERTIFICADO
                            </a>
                        </div>

                        <p><strong>O certificado inclui:</strong></p>
                        <ul>
                            <li>Seu nome completo e fun√ß√£o no evento</li>
                            <li>Carga hor√°ria validada pelos organizadores</li>
                            <li>Assinatura digital dos organizadores</li>
                            <li>Validade e autenticidade garantidas</li>
                        </ul>
                    </div>

                    <div style="background-color: #fff3cd; padding: 15px; border-radius: 6px; margin: 20px 0;">
                        <p style="margin: 0; color: #856404;">
                            <strong>‚è∞ Importante:</strong> O link de download √© pessoal e intransfer√≠vel.
                            Mantenha seu certificado em local seguro.
                        </p>
                    </div>

                    <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #e8f4f8; border-radius: 8px;">
                        <p style="margin: 0;">
                            <em>"Levando a ci√™ncia para o bar"</em>
                        </p>
                        <p style="margin: 5px 0 0 0; font-size: 0.9em; color: #666;">
                            Pint of Science Brasil
                        </p>
                    </div>
                </div>
            </body>
            </html>
            """

            return self._enviar_email(email, assunto, html_content)

        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar e-mail de certificado: {e}")
            return False

    def _enviar_email(self, destino: str, assunto: str, html_content: str) -> bool:
        """M√©todo interno para envio de e-mails usando requests."""
        try:
            headers = {
                "accept": "application/json",
                "api-key": self.api_key,
                "content-type": "application/json",
            }

            data = {
                "sender": {"name": self.sender_name, "email": self.sender_email},
                "to": [{"email": destino}],
                "subject": assunto,
                "htmlContent": html_content,
            }

            response = requests.post(self.api_url, headers=headers, json=data)

            if response.status_code == 201:
                logger.info(f"‚úÖ E-mail enviado com sucesso para {destino}")
                return True
            else:
                logger.error(
                    f"‚ùå Falha ao enviar e-mail para {destino}: {response.status_code} - {response.text}"
                )
                return False

        except Exception as e:
            logger.error(f"‚ùå Erro na API Brevo: {e}")
            return False


class GeradorCertificado:
    """Servi√ßo para gera√ß√£o de certificados em PDF."""

    def __init__(self):
        self._servico_criptografia = ServicoCriptografia()

    def gerar_certificado_pdf(
        self, participante: Participante, evento: Evento, cidade: Cidade, funcao: Funcao
    ) -> bytes:
        """
        Gera um certificado PDF para um participante.

        Args:
            participante: Objeto Participante com dados validados
            evento: Objeto Evento
            cidade: Objeto Cidade
            funcao: Objeto Funcao

        Returns:
            Bytes do PDF gerado
        """
        try:
            # Descriptografar dados sens√≠veis
            nome_completo = self._servico_criptografia.descriptografar(
                participante.nome_completo_encrypted
            )
            email = self._servico_criptografia.descriptografar(
                participante.email_encrypted
            )

            # Criar buffer para o PDF
            buffer = BytesIO()

            # Criar documento
            doc = SimpleDocTemplate(
                buffer,
                pagesize=letter,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=18,
            )

            # Estilos
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                "CustomTitle",
                parent=styles["Heading1"],
                fontSize=24,
                spaceAfter=30,
                alignment=TA_CENTER,
                textColor=colors.HexColor("#e74c3c"),
            )

            subtitle_style = ParagraphStyle(
                "CustomSubtitle",
                parent=styles["Heading2"],
                fontSize=18,
                spaceAfter=20,
                alignment=TA_CENTER,
                textColor=colors.HexColor("#2c3e50"),
            )

            normal_style = ParagraphStyle(
                "CustomNormal",
                parent=styles["Normal"],
                fontSize=12,
                spaceAfter=12,
                alignment=TA_CENTER,
            )

            # Construir conte√∫do
            content = []

            # T√≠tulo
            content.append(Paragraph("CERTIFICADO DE PARTICIPA√á√ÉO", title_style))
            content.append(Spacer(1, 20))

            # Subt√≠tulo
            content.append(
                Paragraph(f"Pint of Science Brasil - {evento.ano}", subtitle_style)
            )
            content.append(Spacer(1, 30))

            # Texto principal
            texto_certificado = f"""
            Certificamos que <b>{nome_completo}</b> participou do evento
            <b>Pint of Science Brasil {evento.ano}</b> na cidade de <b>{cidade.nome}-{cidade.estado}</b>,
            com a fun√ß√£o de <b>{funcao.nome_funcao}</b>.
            """
            content.append(Paragraph(texto_certificado, normal_style))
            content.append(Spacer(1, 20))

            # Detalhes da participa√ß√£o
            detalhes_data = [
                ["Per√≠odo do Evento:", evento.datas_evento],
                ["Datas de Participa√ß√£o:", participante.datas_participacao],
                [
                    "Carga Hor√°ria Total:",
                    f"{participante.carga_horaria_calculada} horas",
                ],
                ["Fun√ß√£o Exercida:", funcao.nome_funcao],
            ]

            if participante.titulo_apresentacao:
                detalhes_data.append(
                    ["T√≠tulo da Apresenta√ß√£o:", participante.titulo_apresentacao]
                )

            tabela_detalhes = Table(detalhes_data, colWidths=[3 * inch, 3 * inch])
            tabela_detalhes.setStyle(
                TableStyle(
                    [
                        ("BACKGROUND", (0, 0), (-1, -1), colors.lightgrey),
                        ("TEXTCOLOR", (0, 0), (-1, -1), colors.black),
                        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
                        ("FONTNAME", (0, 0), (-1, -1), "Helvetica"),
                        ("FONTSIZE", (0, 0), (-1, -1), 10),
                        ("BOTTOMPADDING", (0, 0), (-1, -1), 12),
                        ("BACKGROUND", (0, 0), (0, -1), colors.grey),
                        ("TEXTCOLOR", (0, 0), (0, -1), colors.whitesmoke),
                    ]
                )
            )

            content.append(tabela_detalhes)
            content.append(Spacer(1, 30))

            # Data de emiss√£o
            data_emissao = datetime.now().strftime("%d de %B de %Y")
            content.append(Paragraph(f"Emitido em {data_emissao}", normal_style))
            content.append(Spacer(1, 40))

            # Rodap√©
            rodape_style = ParagraphStyle(
                "Rodape",
                parent=styles["Normal"],
                fontSize=10,
                spaceAfter=10,
                alignment=TA_CENTER,
                textColor=colors.HexColor("#7f8c8d"),
            )

            content.append(
                Paragraph("Organiza√ß√£o: Pint of Science Brasil", rodape_style)
            )
            content.append(
                Paragraph(
                    "Este certificado tem validade digital e pode ser verificado online.",
                    rodape_style,
                )
            )
            content.append(Paragraph('"Levando a ci√™ncia para o bar"', rodape_style))

            # Gerar PDF
            doc.build(content)

            # Retornar bytes
            pdf_bytes = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ Certificado PDF gerado para {nome_completo}")
            return pdf_bytes

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar certificado PDF: {e}")
            raise ValueError("Erro ao gerar certificado")

    def gerar_nome_arquivo_certificado(self, evento_ano: int) -> str:
        """Gera um nome √∫nico para o arquivo do certificado."""
        uuid_curto = str(uuid.uuid4())[:8]
        return f"Certificado-PintOfScience-{evento_ano}-{uuid_curto}.pdf"


class ServicoValidacao:
    """Servi√ßo para valida√ß√£o de regras de neg√≥cio."""

    def __init__(self):
        self._servico_criptografia = ServicoCriptografia()
        self._servico_calculo = ServicoCalculoCargaHoraria()

    def validar_inscricao(
        self, dados: ParticipanteCreate, evento: Evento
    ) -> Tuple[bool, str]:
        """
        Valida uma inscri√ß√£o de participante.

        Args:
            dados: Dados da inscri√ß√£o
            evento: Evento correspondente

        Returns:
            Tupla com (valido, mensagem_erro)
        """
        try:
            # Validar email duplicado no mesmo evento
            with db_manager.get_db_session() as session:
                participante_repo = get_participante_repository(session)

                email_criptografado = self._servico_criptografia.criptografar_email(
                    dados.email
                )
                existing = participante_repo.get_by_encrypted_email(
                    email_criptografado, evento.id
                )

                if existing:
                    return False, "Este email j√° est√° inscrito neste evento"

            # Validar datas de participa√ß√£o
            if not self._servico_calculo.validar_datas_participacao(
                dados.datas_participacao, evento.datas_evento
            ):
                return False, "Datas de participa√ß√£o inv√°lidas para este evento"

            # Validar carga hor√°ria m√≠nima
            carga_horaria, _ = self._servico_calculo.calcular_carga_horaria(
                dados.datas_participacao, evento.datas_evento
            )

            if carga_horaria == 0:
                return False, "Carga hor√°ria inv√°lida para as datas informadas"

            return True, "Inscri√ß√£o v√°lida"

        except Exception as e:
            logger.error(f"‚ùå Erro ao validar inscri√ß√£o: {e}")
            return False, "Erro na valida√ß√£o da inscri√ß√£o"

    def validar_download_certificado(
        self, email: str, evento_id: int
    ) -> Tuple[bool, Optional[ParticipanteRead], str]:
        """
        Valida se um usu√°rio pode baixar certificado.

        Args:
            email: Email do participante
            evento_id: ID do evento

        Returns:
            Tupla com (pode_baixar, participante, mensagem)
        """
        try:
            with db_manager.get_db_session() as session:
                participante_repo = get_participante_repository(session)
                evento_repo = get_evento_repository(session)

                # Buscar participante
                email_criptografado = self._servico_criptografia.criptografar_email(
                    email
                )
                participante = participante_repo.get_by_encrypted_email(
                    email_criptografado, evento_id
                )

                if not participante:
                    return (
                        False,
                        None,
                        "Email n√£o encontrado ou n√£o inscrito neste evento",
                    )

                # Verificar se est√° validado
                if not participante.validado:
                    return (
                        False,
                        None,
                        "Sua participa√ß√£o ainda n√£o foi validada pelos organizadores",
                    )

                # Buscar dados relacionados
                evento = evento_repo.get_by_id(Evento, evento_id)
                if not evento:
                    return False, None, "Evento n√£o encontrado"

                # Criar objeto de leitura
                participante_read = ParticipanteRead(
                    id=participante.id,
                    nome_completo=self._servico_criptografia.descriptografar(
                        participante.nome_completo_encrypted
                    ),
                    email=self._servico_criptografia.descriptografar(
                        participante.email_encrypted
                    ),
                    titulo_apresentacao=participante.titulo_apresentacao,
                    evento_id=participante.evento_id,
                    cidade_id=participante.cidade_id,
                    funcao_id=participante.funcao_id,
                    datas_participacao=participante.datas_participacao,
                    carga_horaria_calculada=participante.carga_horaria_calculada,
                    validado=participante.validado,
                    data_inscricao=participante.data_inscricao,
                )

                return True, participante_read, "Certificado dispon√≠vel para download"

        except Exception as e:
            logger.error(f"‚ùå Erro ao validar download: {e}")
            return False, None, "Erro ao validar download do certificado"


# ============= INST√ÇNCIAS GLOBAIS =============

servico_criptografia = ServicoCriptografia()
servico_calculo_carga_horaria = ServicoCalculoCargaHoraria()
servico_email = ServicoEmail()
gerador_certificado = GeradorCertificado()
servico_validacao = ServicoValidacao()


# ============= FUN√á√ïES DE CONVENI√äNCIA =============


def inscrever_participante(
    dados_inscricao: ParticipanteCreate,
) -> Tuple[bool, str, Optional[int]]:
    """
    Fun√ß√£o de conveni√™ncia para inscrever um participante.

    Args:
        dados_inscricao: Dados completos da inscri√ß√£o

    Returns:
        Tupla com (sucesso, mensagem, participante_id)
    """
    try:
        # Validar dados
        with db_manager.get_db_session() as session:
            evento_repo = get_evento_repository(session)
            evento = evento_repo.get_by_id(Evento, dados_inscricao.evento_id)

            if not evento:
                return False, "Evento n√£o encontrado", None

            valido, mensagem = servico_validacao.validar_inscricao(
                dados_inscricao, evento
            )
            if not valido:
                return False, mensagem, None

            # Criptografar dados sens√≠veis
            nome_criptografado = servico_criptografia.criptografar_nome(
                dados_inscricao.nome_completo
            )
            email_criptografado = servico_criptografia.criptografar_email(
                dados_inscricao.email
            )

            # Calcular carga hor√°ria
            carga_horaria, _ = servico_calculo_carga_horaria.calcular_carga_horaria(
                dados_inscricao.datas_participacao, evento.datas_evento
            )

            print(f"DEBUG: Criando participante...")
            # Criar participante
            participante_repo = get_participante_repository(session)
            participante = participante_repo.create_participante(
                nome_completo_encrypted=nome_criptografado,
                email_encrypted=email_criptografado,
                titulo_apresentacao=dados_inscricao.titulo_apresentacao,
                evento_id=dados_inscricao.evento_id,
                cidade_id=dados_inscricao.cidade_id,
                funcao_id=dados_inscricao.funcao_id,
                datas_participacao=dados_inscricao.datas_participacao,
                carga_horaria_calculada=carga_horaria,
                validado=False,  # Inicia como n√£o validado
            )

            # Enviar e-mail de confirma√ß√£o
            if servico_email.is_configured():
                cidade_repo = get_cidade_repository(session)
                funcao_repo = get_funcao_repository(session)

                cidade = cidade_repo.get_by_id(Cidade, dados_inscricao.cidade_id)
                funcao = funcao_repo.get_by_id(Funcao, dados_inscricao.funcao_id)

                dados_email = {
                    "evento_ano": evento.ano,
                    "cidade_nome": (
                        f"{cidade.nome}-{cidade.estado}" if cidade else "N/A"
                    ),
                    "funcao_nome": funcao.nome_funcao if funcao else "N/A",
                    "datas_participacao": dados_inscricao.datas_participacao,
                    "carga_horaria": carga_horaria,
                }

                servico_email.enviar_email_confirmacao_inscricao(
                    dados_inscricao.nome_completo, dados_inscricao.email, dados_email
                )

            logger.info(f"‚úÖ Participante inscrito: {dados_inscricao.email}")
            return True, "Inscri√ß√£o realizada com sucesso!", participante.id

    except Exception as e:
        logger.error(f"‚ùå Erro ao inscrever participante: {e}")
        return False, f"Erro ao realizar inscri√ß√£o: {str(e)}", None


def baixar_certificado(email: str, evento_id: int) -> Tuple[bool, Optional[bytes], str]:
    """
    Fun√ß√£o de conveni√™ncia para baixar certificado.

    Args:
        email: Email do participante
        evento_id: ID do evento

    Returns:
        Tupla com (sucesso, pdf_bytes, mensagem)
    """
    try:
        # Validar download
        pode_baixar, participante, mensagem = (
            servico_validacao.validar_download_certificado(email, evento_id)
        )

        if not pode_baixar:
            return False, None, mensagem

        # Buscar dados relacionados
        with db_manager.get_db_session() as session:
            evento_repo = get_evento_repository(session)
            cidade_repo = get_cidade_repository(session)
            funcao_repo = get_funcao_repository(session)
            participante_repo = get_participante_repository(session)

            evento = evento_repo.get_by_id(Evento, evento_id)
            cidade = cidade_repo.get_by_id(Cidade, participante.cidade_id)
            funcao = funcao_repo.get_by_id(Funcao, participante.funcao_id)
            participante_db = participante_repo.get_by_id(Participante, participante.id)

            if not all([evento, cidade, funcao, participante_db]):
                return False, None, "Dados incompletos para gerar certificado"

            # Gerar PDF
            pdf_bytes = gerador_certificado.gerar_certificado_pdf(
                participante_db, evento, cidade, funcao
            )

            logger.info(f"‚úÖ Certificado baixado por: {email}")
            return True, pdf_bytes, "Certificado gerado com sucesso!"

    except Exception as e:
        logger.error(f"‚ùå Erro ao baixar certificado: {e}")
        return False, None, f"Erro ao gerar certificado: {str(e)}"


def validar_participantes(
    participante_ids: List[int], validados: List[bool]
) -> Tuple[bool, str]:
    """
    Fun√ß√£o para validar m√∫ltiplos participantes.

    Args:
        participante_ids: Lista de IDs dos participantes
        validados: Lista de status de valida√ß√£o correspondentes

    Returns:
        Tupla com (sucesso, mensagem)
    """
    try:
        if len(participante_ids) != len(validados):
            return False, "Listas de IDs e status devem ter o mesmo tamanho"

        current_user = get_current_user_info()
        if not current_user:
            return False, "Usu√°rio n√£o autenticado"

        with db_manager.get_db_session() as session:
            participante_repo = get_participante_repository(session)
            auditoria_repo = get_auditoria_repository(session)

            success_count = 0
            error_count = 0

            for i, participante_id in enumerate(participante_ids):
                try:
                    participante = participante_repo.get_by_id(
                        Participante, participante_id
                    )
                    if not participante:
                        error_count += 1
                        continue

                    # Atualizar valida√ß√£o
                    novo_status = validados[i]
                    status_anterior = participante.validado

                    if status_anterior != novo_status:
                        participante.validado = novo_status
                        session.merge(participante)

                        # Registrar auditoria
                        acao = (
                            "VALIDATE_PARTICIPANTE"
                            if novo_status
                            else "INVALIDATE_PARTICIPANTE"
                        )
                        detalhes = f"Participante {participante_id} {'validado' if novo_status else 'invalidado'}"

                        auditoria_repo.create_audit_log(
                            coordenador_id=current_user["id"],
                            acao=acao,
                            detalhes=detalhes,
                        )

                        # Enviar e-mail se validado
                        if novo_status and servico_email.is_configured():
                            try:
                                nome = servico_criptografia.descriptografar(
                                    participante.nome_completo_encrypted
                                )
                                email = servico_criptografia.descriptografar(
                                    participante.email_encrypted
                                )

                                # Aqui voc√™ implementaria a gera√ß√£o do link de download
                                link_download = (
                                    f"https://seusite.com/download/{participante_id}"
                                )

                                servico_email.enviar_email_certificado_liberado(
                                    nome, email, link_download
                                )
                            except Exception as e:
                                logger.warning(
                                    f"‚ö†Ô∏è N√£o foi poss√≠vel enviar e-mail de certificado: {e}"
                                )

                        success_count += 1
                    else:
                        # Status n√£o mudou
                        success_count += 1

                except Exception as e:
                    logger.error(
                        f"‚ùå Erro ao validar participante {participante_id}: {e}"
                    )
                    error_count += 1

            mensagem = f"Processados {success_count + error_count} participantes. "
            if success_count > 0:
                mensagem += f"{success_count} atualizados com sucesso. "
            if error_count > 0:
                mensagem += f"{error_count} erros."

            logger.info(f"‚úÖ Valida√ß√£o em lote conclu√≠da: {mensagem}")
            return True, mensagem

    except Exception as e:
        logger.error(f"‚ùå Erro ao validar participantes: {e}")
        return False, f"Erro ao processar valida√ß√£o: {str(e)}"
