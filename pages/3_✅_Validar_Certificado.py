"""
P√°gina de Valida√ß√£o de Certificados

Permite que qualquer pessoa valide a autenticidade de um certificado
usando o hash de valida√ß√£o fornecido no certificado.
"""

import streamlit as st
from datetime import datetime
from app.db import (
    db_manager,
    get_participante_repository,
    get_evento_repository,
    get_cidade_repository,
    get_funcao_repository,
)
from app.core import settings
from app.models import Participante, Evento, Cidade, Funcao
from app.services import servico_criptografia, servico_calculo_carga_horaria

st.set_page_config(
    page_title=f"Validar Certificado - {settings.app_name}",
    page_icon="‚úÖ",
    layout="centered",
)

# Custom CSS para reduzir tamanho da fonte nos metrics
st.markdown(
    """
    <style>
    .header-main {
        background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    /* Reduzir tamanho da fonte do valor do metric */
    [data-testid="stMetricValue"] {
        font-size: 1.33rem !important;
    }

    /* Reduzir tamanho da fonte do label do metric */
    [data-testid="stMetricLabel"] {
        font-size: 0.9rem !important;
    }

    /* Ajustar espa√ßamento */
    [data-testid="metric-container"] {
        padding: 0.5rem 0 !important;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# T√≠tulo da p√°gina
st.markdown(
    """
    <div class="header-main">
        <h1>‚úÖ Valida√ß√£o de Certificado</h1>
    </div>
    """,
    unsafe_allow_html=True,
)

# Instru√ß√µes
st.info(
    """
    **‚ÑπÔ∏è Como validar seu certificado:**

    1. Localize o c√≥digo de valida√ß√£o no rodap√© do seu certificado PDF
    2. Cole o c√≥digo no campo abaixo
    3. Clique em ‚ÄúValidar Certificado"

    O c√≥digo de valida√ß√£o tem 64 caracteres (letras e n√∫meros).
    """
)

# Verificar se h√° hash na URL (vindo do link no PDF)
query_params = st.query_params
hash_from_url = query_params.get("hash", None)

# Campo para inserir o hash
if hash_from_url:
    hash_validacao = st.text_input(
        "C√≥digo de Valida√ß√£o:",
        value=hash_from_url,
        max_chars=64,
        help="Hash de 64 caracteres encontrado no certificado",
    )
else:
    hash_validacao = st.text_input(
        "C√≥digo de Valida√ß√£o:",
        placeholder="Insira o c√≥digo de valida√ß√£o do certificado",
        max_chars=64,
        help="Hash de 64 caracteres encontrado no certificado",
    )

# Bot√£o de valida√ß√£o
if st.button("üîç Validar Certificado", type="primary", width="content"):
    if not hash_validacao or len(hash_validacao) != 64:
        st.error("‚ùå C√≥digo de valida√ß√£o inv√°lido! Deve ter exatamente 64 caracteres.")
    else:
        with st.spinner("Verificando autenticidade..."):
            try:
                with db_manager.get_db_session() as session:
                    participante_repo = get_participante_repository(session)
                    evento_repo = get_evento_repository(session)
                    cidade_repo = get_cidade_repository(session)
                    funcao_repo = get_funcao_repository(session)

                    # Buscar participante pelo hash
                    participante = (
                        session.query(Participante)
                        .filter(Participante.hash_validacao == hash_validacao)
                        .first()
                    )

                    if not participante:
                        st.error(
                            "‚ùå **Certificado N√ÉO ENCONTRADO**\n\n"
                            "Este c√≥digo de valida√ß√£o n√£o corresponde a nenhum certificado "
                            "emitido pelo Pint of Science Brasil.\n\n"
                            "**Poss√≠veis causas:**\n"
                            "- C√≥digo digitado incorretamente\n"
                            "- Certificado falsificado\n"
                            "- Certificado ainda n√£o foi emitido"
                        )
                    else:
                        # Descriptografar dados
                        nome_completo = servico_criptografia.descriptografar(
                            participante.nome_completo_encrypted
                        )
                        email = servico_criptografia.descriptografar(
                            participante.email_encrypted
                        )

                        # Verificar HMAC para garantir integridade
                        hash_esperado = (
                            servico_criptografia.gerar_hash_validacao_certificado(
                                participante.id,
                                participante.evento_id,
                                email,
                                nome_completo,
                            )
                        )

                        if hash_validacao != hash_esperado:
                            st.error(
                                "‚ùå **Certificado INV√ÅLIDO**\n\n"
                                "A assinatura digital deste certificado foi comprometida.\n"
                                "Este certificado pode ter sido adulterado ou falsificado."
                            )
                        else:
                            # Buscar dados relacionados
                            evento = evento_repo.get_by_id(
                                Evento, participante.evento_id
                            )
                            cidade = cidade_repo.get_by_id(
                                Cidade, participante.cidade_id
                            )
                            funcao = funcao_repo.get_by_id(
                                Funcao, participante.funcao_id
                            )

                            # Calcular carga hor√°ria on-the-fly
                            carga_horaria, _ = (
                                servico_calculo_carga_horaria.calcular_carga_horaria(
                                    participante.datas_participacao,
                                    evento.datas_evento,
                                    evento.ano,
                                    participante.funcao_id,
                                )
                            )

                            # Certificado v√°lido
                            st.success("‚úÖ **CERTIFICADO AUT√äNTICO**")
                            st.balloons()

                            st.markdown("---")
                            st.subheader("üìã Informa√ß√µes do Certificado")

                            # Exibir informa√ß√µes em colunas
                            col1, col2 = st.columns(2)

                            with col1:
                                st.metric("üë§ Participante", nome_completo)
                                st.metric(
                                    "üé≠ Fun√ß√£o", funcao.nome_funcao if funcao else "N/A"
                                )
                                st.metric(
                                    "üìç Cidade",
                                    (
                                        f"{cidade.nome} - {cidade.estado}"
                                        if cidade
                                        else "N/A"
                                    ),
                                )

                            with col2:
                                st.metric(
                                    "üìÖ Evento",
                                    (
                                        f"Pint of Science {evento.ano}"
                                        if evento
                                        else "N/A"
                                    ),
                                )
                                st.metric(
                                    "‚è±Ô∏è Carga Hor√°ria",
                                    f"{carga_horaria}h",
                                )
                                st.metric(
                                    "‚úÖ Status",
                                    (
                                        "Validado"
                                        if participante.validado
                                        else "Aguardando valida√ß√£o"
                                    ),
                                )

                            # Informa√ß√µes adicionais
                            st.markdown("---")
                            st.markdown("**üìÑ Detalhes Adicionais:**")

                            if participante.titulo_apresentacao:
                                st.markdown(
                                    f"**T√≠tulo da apresenta√ß√£o:**  \n{participante.titulo_apresentacao}"
                                )

                            # Formatar datas de participa√ß√£o
                            datas_list = [
                                d.strip()
                                for d in participante.datas_participacao.split(",")
                            ]
                            datas_formatadas = []
                            for data in datas_list:
                                try:
                                    dt = datetime.fromisoformat(data)
                                    datas_formatadas.append(dt.strftime("%d/%m/%Y"))
                                except:
                                    datas_formatadas.append(data)

                            st.markdown(
                                f"**Datas de participa√ß√£o:**  \n{', '.join(datas_formatadas)}"
                            )

                            # Data de inscri√ß√£o
                            try:
                                dt_inscricao = datetime.fromisoformat(
                                    participante.data_inscricao
                                )
                                st.markdown(
                                    f"**Data de inscri√ß√£o:**  \n{dt_inscricao.strftime('%d/%m/%Y √†s %H:%M')}"
                                )
                            except:
                                st.markdown(
                                    f"**Data de inscri√ß√£o:**  \n{participante.data_inscricao}"
                                )

                            # C√≥digo de valida√ß√£o
                            st.markdown("---")
                            st.markdown("**üîí C√≥digo de Valida√ß√£o (Hash):**")
                            st.code(hash_validacao, language=None)

                            st.info(
                                "Este certificado foi verificado em "
                                f"{datetime.now().strftime('%d/%m/%Y √†s %H:%M')} e confirmado como aut√™ntico."
                            )

            except Exception as e:
                st.error(f"‚ùå Erro ao validar certificado: {str(e)}")
                st.exception(e)

# Rodap√© informativo
st.markdown("---")
st.markdown(
    """
    ### üîê Sobre a Valida√ß√£o

    Todos os certificados emitidos pelo Pint of Science Brasil possuem um **c√≥digo √∫nico de valida√ß√£o**
    que garante sua autenticidade. Este c√≥digo √© gerado usando criptografia HMAC-SHA256 e n√£o pode ser
    falsificado.

    **Como funciona:**
    - Cada certificado recebe um hash √∫nico baseado nos dados do participante
    - O hash √© verific√°vel mas n√£o pode ser reproduzido sem a chave secreta
    - Mesmo pequenas altera√ß√µes nos dados invalidam o certificado
    - N√£o armazenamos c√≥pias dos PDFs - a valida√ß√£o √© feita atrav√©s do banco de dados

    Se voc√™ encontrar algum problema com a valida√ß√£o, entre em contato com os organizadores do evento.
    """,
    unsafe_allow_html=True,
)

st.markdown(
    '<p style="text-align: center; color: #95a5a6; margin-top: 40px;">'
    "‚ÄúLevando a ci√™ncia para o bar‚Äù - ¬© Pint of Science Brasil"
    "</p>",
    unsafe_allow_html=True,
)
